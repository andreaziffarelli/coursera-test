# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
            - nome: Cache
  usi: azioni/cache@v4.1.2
  con:
    # Un elenco di file, directory e modelli jolly da memorizzare nella cache e ripristinare
    sentiero:
    # Una chiave esplicita per ripristinare e salvare la cache
    chiave:
    # Una stringa multilinea ordinata che elenca le chiavi con prefisso corrispondente, utilizzate per ripristinare la cache obsoleta se non si è verificato alcun hit nella cache per la chiave. Nota che `cache-hit` restituisce false in questo caso.
    restore-keys: # facoltativo
    # La dimensione del blocco utilizzata per suddividere i file di grandi dimensioni durante il caricamento, in byte
    upload-chunk-size: # facoltativo
    # Un valore booleano facoltativo, se abilitato, consente ai runner di Windows di salvare o ripristinare le cache che possono essere ripristinate o salvate rispettivamente su altre piattaforme
    enableCrossOsArchive: # facoltativo, il valore predefinito è falso
    # Fallisci il flusso di lavoro se la voce della cache non viene trovata
    fail-on-cache-miss: # facoltativo, il valore predefinito è false
    # Controlla se esiste una voce nella cache per gli input specificati (chiave, chiavi di ripristino) senza scaricare la cache
    lookup-only: # facoltativo, il valore predefinito è false
    # Esegui il passaggio di post per salvare la cache anche se un altro passaggio precedente fallisce
    save-always: # facoltativo, il valore predefinito è false
          
